// Copyright (c) 2020 Doc.ai and/or its affiliates.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package callback;

import "ptypes/any/any.proto";

// A type of request message
enum Mode {
    Invoke = 0;
    NewStream = 1;
    Header = 2;
    Trailer = 3;
    Close = 4;
    Msg = 5;
    Recv = 6;
    Error = 7;
}
// Request passed
message Request {
    Mode mode = 1;
    string method = 2;
    int64 opId = 3;
    google.protobuf.Any args = 4;
    google.protobuf.Any reply = 5;
    StreamDescriptor descr = 6;
}

message StreamDescriptor {
    string StreamName = 1;
    // At least one of these is true.
    bool ServerStreams = 2;
    bool ClientStreams = 3;
}

message MDValue {
    string key = 1;
    repeated string value = 2;
}

message MD {
    repeated MDValue mds = 1;
}

// Response send
message Response {
    Mode mode = 1;
    ResponseStatus status = 2;
    string method = 3;
    int64 opId = 4;
    google.protobuf.Any response = 5;
}

message ResponseStatus {
    int32 code = 1;
    string message = 2;
    repeated google.protobuf.Any details = 3;
}
service CallbackService {
    rpc HandleCallbacks (stream Response) returns (stream Request);
}
